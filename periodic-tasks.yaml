AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref 'AWS::StackName'
      apiKey: '{{resolve:secretsmanager:bodds/shared/datadog/api-key:SecretString:api_key}}'
      pythonLayerVersion: 105
      extensionLayerVersion: 75
      site: datadoghq.eu
      service: !Sub '${ProjectName}-periodic-tasks'
      env: !Ref Environment
      version: !Ref Version
      gitData: !Ref DDGitData
      enableDDTracing: false
      captureLambdaPayload: true
      enableProfiling: false
Description: Supporting services for the execution of periodic tasks

Parameters:
  Environment:
    Type: String
    Description: The environment into which the stack is being deployed
  ProjectName:
    Description: The name of the project
    Type: String
  SubFunction:
    Description: The sub-fuction that each resource relates to
    Type: String
    Default: 'pt'
  AvlConsumerApiBaseUrl:
    Type: String
  CavlConsumerUrl:
    Type: String
  RdsDbHostAddr:
    Type: String
    Default: ''
  RdsDbPort:
    Type: Number
  RdsDbName:
    Type: String
    Description: Database name for local development
    Default: 'postgres'
  RdsDbUsername:
    Type: String
    Description: User name for local development
    Default: 'bodds_rw'
  BoilerplateLambdaLayerArn:
    Type: String
  DDGitData:
    Type: String
    Default: ''
    Description: 'The output of $(git rev-parse HEAD),$(git config --get remote.origin.url). Used for Datadog Source Code Integration tagging'
  Version:
    Type: String
    Default: 'unknown'
    Description: 'Version to pass to Datadog APM'
Conditions:
  IsNotLocal: !Not [!Equals [!Ref Environment, 'local']]

Globals:
  Function:
    Architectures:
      - x86_64
    Runtime: python3.11
    Timeout: 60
    MemorySize: 1024
    ReservedConcurrentExecutions: 3
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-x86_64:5'
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:53'
    LoggingConfig:
      LogFormat: JSON
    Tracing: Active
    PropagateTags: true
    Environment:
      Variables:
        PROJECT_ENV: !Ref Environment
        PROJECT_NAME: !Ref ProjectName
        HTTPS_PROXY: !If
          - IsNotLocal
          - !Sub 'http://squid.bodds.${Environment}:3128'
          - !Ref AWS::NoValue
        DD_EXTENSION_VERSION: compatibility
        NO_PROXY: 'localhost,127.0.0.1,secretsmanager.eu-west-2.amazonaws.com,s3.eu-west-2.amazonaws.com,dynamodb.eu-west-2.amazonaws.com,instrumentation-telemetry-intake.datadoghq.eu,7-63-3-app.agent.datadoghq.eu,http-intake.logs.datadoghq.eu,trace.agent.datadoghq.eu'
    KmsKeyArn: !If
      - IsNotLocal
      - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
      - !Ref AWS::NoValue
    VpcConfig: !If
      - IsNotLocal
      - SubnetIds:
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-0}}'
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-1}}'
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-2}}'
        SecurityGroupIds:
          - !GetAtt CommonLambdaSecurityGroup.GroupId
      - !Ref AWS::NoValue

Resources:
  ###################################
  #### PT ITERATOR STATE MACHINE ####
  ###################################
  IteratorStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-iterator-sm'
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref IteratorLambda
      Events:
        Scheduler:
          Type: Schedule
          Properties:
            Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-iterator-sm-scheduler'
            Schedule: rate(1 minute)
            Enabled: True
            Input: !Sub |
              {
                "functions": [ 
                  "${GenerateGtfsRtLambda}",
                  "${GenerateSiriVmLambda}",
                  "${GenerateSiriVmTflLambda}"
                ]
              }
      Definition:
        StartAt: ConfigureCount
        States:
          ConfigureCount:
            Next: MapState
            Result:
              intervals: [0, 10, 20, 30, 40, 50]
            ResultPath: $.config
            Type: Pass
          MapState:
            Type: Map
            ItemsPath: $.functions
            Iterator:
              StartAt: InvokeLambda
              States:
                InvokeLambda:
                  Type: Task
                  Resource: !GetAtt IteratorLambda.Arn
                  Parameters:
                    functionName.$: $.functionName
                    intervals.$: $.intervals
                  Next: Done
                Done:
                  End: true
                  Type: Pass
            Parameters:
              functionName.$: $$.Map.Item.Value
              intervals.$: $.config.intervals
            End: true

  ###################################
  #### NAPTAN CACHE STATE MACHINE ####
  ###################################
  NaptanCacheStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-naptan-cache-sm'
      Role: !GetAtt NaptanCacheStateMachineRole.Arn
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-naptan-cache-sm-daily'
            Description: 'Trigger Naptan cache update state machine every day at 1am UTC'
            Schedule: 'cron(0 1 * * ? *)'
            Input: !Sub |
              {
                "naptan_url": "https://naptan.api.dft.gov.uk/v1/access-nodes?dataFormat=xml",
                "dynamo_table": "${ProjectName}-${Environment}-naptan-stop-points-table",
                "aws_region": "${AWS::Region}",
                "max_concurrent_batches": "60",
                "write_mode": "batch"
              }
      Definition:
        StartAt: PopulateDynamodbNaptanCache
        States:
          PopulateDynamodbNaptanCache:
            Type: Task
            Resource: !GetAtt PopulateDynamodbNaptanCacheLambda.Arn
            Parameters:
              'naptan_url.$': '$.naptan_url'
              'dynamo_table.$': '$.dynamo_table'
              'aws_region.$': '$.aws_region'
              'max_concurrent_batches.$': '$.max_concurrent_batches'
              'write_mode.$': '$.write_mode'
            ResultPath: '$.populate_result'
            Retry:
              - ErrorEquals: ['Lambda.Unknown']
                IntervalSeconds: 0
                MaxAttempts: 3
            Catch:
              - ErrorEquals: ['States.TaskFailed']
                Next: FailureState
            Next: UpdateIDsDynamodbNaptanCache
          UpdateIDsDynamodbNaptanCache:
            Type: Task
            Resource: !GetAtt UpdateIDsDynamodbNaptanCacheLambda.Arn
            Parameters:
              'dynamo_table.$': '$.dynamo_table'
              'aws_region.$': '$.aws_region'
            Catch:
              - ErrorEquals: ['States.TaskFailed']
                Next: FailureState
            End: true
          FailureState:
            Type: Fail

  ##########################################
  #### CONSOLIDATE TRACKS STATE MACHINE ####
  ##########################################
  ConsolidateTracksStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-sm'
      Role: !GetAtt ConsolidateTracksStateMachineRole.Arn
      Events:
        # DailySchedule:
        #   Type: Schedule
        #   Properties:
        #     Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-sm-daily'
        #     Description: 'Trigger Consolidate Tracks job every day at 2am UTC'
        #     Schedule: 'cron(0 2 * * ? *)'
        #     Input: !Sub |
        #       {
        #         "threshold_meters": "20.0",
        #         "dry_run": true
        #       }
      DefinitionUri: './src/consolidate_tracks.statemachine.json'
      DefinitionSubstitutions:
        ConsolidateTracksBatcherLambdaArn: !GetAtt ConsolidateTracksBatcherLambda.Arn
        ConsolidateTracksUpdaterLambdaArn: !GetAtt ConsolidateTracksUpdaterLambda.Arn
        ConsolidateTracksReporterLambdaArn: !GetAtt ConsolidateTracksReporterLambda.Arn
        S3BucketName: !Sub 'bodds-${Environment}'

  ##########################
  #### LAMBDA FUNCTIONS ####
  ##########################
  IteratorLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-iterator-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: iterator.lambda_handler
      MemorySize: 128
      Role: !GetAtt IteratorLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      LoggingConfig:
        LogGroup: !Ref IteratorLambdaLogGroup

  GenerateGtfsRtLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-generate-gtfsrt-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: create_gtfsrt_zip.lambda_handler
      Role: !GetAtt GenerateLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          CAVL_CONSUMER_URL: !Ref CavlConsumerUrl
          GTFS_API_BASE_URL: !Ref AvlConsumerApiBaseUrl
          GTFS_API_ACTIVE: 'True'
          AWS_SIRIVM_STORAGE_BUCKET_NAME: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/sirivm/name}}'
            - !Ref AWS::NoValue
          # Database
          POSTGRES_HOST: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: !Ref RdsDbPort
          POSTGRES_DB: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
            - !Ref RdsDbName
          POSTGRES_USER: !If
            - IsNotLocal
            - !Sub '{{resolve:secretsmanager:bodds/${Environment}/rds/user/bodds_rw:SecretString:username}}'
            - !Ref RdsDbUsername

      LoggingConfig:
        LogGroup: !Ref GenerateGtfsRtLambdaLogGroup

  GenerateSiriVmLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: create_sirivm_zip.lambda_handler
      Role: !GetAtt GenerateLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          AVL_CONSUMER_API_BASE_URL: !Ref AvlConsumerApiBaseUrl
          AWS_SIRIVM_STORAGE_BUCKET_NAME: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/sirivm/name}}'
            - !Ref AWS::NoValue
          # Database
          POSTGRES_HOST: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: !Ref RdsDbPort
          POSTGRES_DB: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
            - !Ref RdsDbName
          POSTGRES_USER: !If
            - IsNotLocal
            - !Sub '{{resolve:secretsmanager:bodds/${Environment}/rds/user/bodds_rw:SecretString:username}}'
            - !Ref RdsDbUsername
      LoggingConfig:
        LogGroup: !Ref GenerateSiriVmLambdaLogGroup

  GenerateSiriVmTflLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-tfl-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: create_sirivm_tfl_zip.lambda_handler
      Role: !GetAtt GenerateLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          AVL_CONSUMER_API_BASE_URL: !Ref AvlConsumerApiBaseUrl
          AWS_SIRIVM_STORAGE_BUCKET_NAME: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/sirivm/name}}'
            - !Ref AWS::NoValue
          # Database
          POSTGRES_HOST: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: !Ref RdsDbPort
          POSTGRES_DB: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
            - !Ref RdsDbName
          POSTGRES_USER: !If
            - IsNotLocal
            - !Sub '{{resolve:secretsmanager:bodds/${Environment}/rds/user/bodds_rw:SecretString:username}}'
            - !Ref RdsDbUsername
      LoggingConfig:
        LogGroup: !Ref GenerateSiriVmTflLambdaLogGroup

  PopulateDynamodbNaptanCacheLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-populate-dynamodb-naptan-cache-lambda'
      Description: Periodic Tasks - Populate the DynamoDB Naptan Cache
      CodeUri: ./src/periodic_tasks/naptan_cache_populator
      Handler: app.handler_naptan_cache_populator.lambda_handler
      Role: !GetAtt NaptanCacheLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Timeout: 900
      MemorySize: 1769
      EphemeralStorage:
        Size: 1024

  UpdateIDsDynamodbNaptanCacheLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-update-ids-dynamodb-naptan-cache-lambda'
      Description: Update IDs in the DynamoDB Naptan Cache with IDs from BODS DB
      CodeUri: ./src/periodic_tasks/naptan_cache_id_updater
      Handler: app.handler_naptan_cache_id_updater.lambda_handler
      Role: !GetAtt NaptanCacheLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          POSTGRES_HOST: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: !Ref RdsDbPort
          POSTGRES_DB: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
            - !Ref RdsDbName
          POSTGRES_USER: !If
            - IsNotLocal
            - !Sub '{{resolve:secretsmanager:bodds/${Environment}/rds/user/bodds_rw:SecretString:username}}'
            - !Ref RdsDbUsername
      Timeout: 900
      MemorySize: 1280

  ConsolidateTracksBatcherLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-batcher-lambda'
      Description: Consolidate duplicated Tracks data in the BODS DB
      CodeUri: ./src/periodic_tasks/consolidate_tracks_batcher
      Handler: app.handler_consolidate_tracks_batcher.lambda_handler
      Role: !GetAtt ConsolidateTracksBatcherExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          POSTGRES_HOST: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: !Ref RdsDbPort
          POSTGRES_DB: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
            - !Ref RdsDbName
          POSTGRES_USER: !If
            - IsNotLocal
            - !Sub '{{resolve:secretsmanager:bodds/${Environment}/rds/user/bodds_rw:SecretString:username}}'
            - !Ref RdsDbUsername
      Timeout: 900

  ConsolidateTracksUpdaterLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-updater-lambda'
      Description: Consolidate duplicated Tracks data in the BODS DB
      CodeUri: ./src/periodic_tasks/consolidate_tracks_updater
      Handler: app.handler_consolidate_tracks_updater.lambda_handler
      Role: !GetAtt ConsolidateTracksUpdaterExecutionRole.Arn
      ReservedConcurrentExecutions: !Ref 'AWS::NoValue' # disable global ReservedConcurrentExecutions
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          POSTGRES_HOST: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: !Ref RdsDbPort
          POSTGRES_DB: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
            - !Ref RdsDbName
          POSTGRES_USER: !If
            - IsNotLocal
            - !Sub '{{resolve:secretsmanager:bodds/${Environment}/rds/user/bodds_rw:SecretString:username}}'
            - !Ref RdsDbUsername
      Timeout: 900

  ConsolidateTracksReporterLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-reporter-lambda'
      Description: Consolidate duplicated Tracks data in the BODS DB
      CodeUri: ./src/periodic_tasks/consolidate_tracks_stat_reporter
      Handler: app.handler_consolidate_tracks_stat_reporter.lambda_handler
      Role: !GetAtt ConsolidateTracksReporterExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          POSTGRES_HOST: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: !Ref RdsDbPort
          POSTGRES_DB: !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
            - !Ref RdsDbName
          POSTGRES_USER: !If
            - IsNotLocal
            - !Sub '{{resolve:secretsmanager:bodds/${Environment}/rds/user/bodds_rw:SecretString:username}}'
            - !Ref RdsDbUsername
      Timeout: 900

  #########################
  #### DYNAMODB TABLES ####
  #########################
  NaptanStopPointTable:
    ## checkov:skip=CKV_AWS_28:Ensure DynamoDB point in time recovery (backup) is enabled. Backup isn't Required, it's a cache
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-naptan-stop-points-table'
      AttributeDefinitions:
        - AttributeName: AtcoCode
          AttributeType: S
        - AttributeName: NaptanCode
          AttributeType: S
      KeySchema:
        - AttributeName: AtcoCode
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: NaptanCodeIndex
          Projection:
            ProjectionType: ALL
          KeySchema:
            - KeyType: HASH
              AttributeName: NaptanCode
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
        KMSMasterKeyId: !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
          - !Ref AWS::NoValue

  ##############################
  #### IAM ROLES + POLICIES ####
  ##############################
  GenerateLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-${SubFunction}-generate-siri-gtfs-lambda-execution-role
      Description: Role for Generate Lambda functions for SIRIVM and GTFS with S3, KMS, and RDS access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-rw-user-access-policy-arn}}'
          - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-ro-user-access-policy-arn}}'
          - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
      Policies:
        - PolicyName: S3AndKMSPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub
                  - '${BucketArn}/*'
                  - BucketArn: !If
                      - IsNotLocal
                      - !Sub 'arn:aws:s3:::{{resolve:ssm:/bodds/${Environment}/s3/sirivm/name}}'
                      - 'arn:aws:s3:::*'
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'

  IteratorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-${SubFunction}-iterator-lambda-execution-role
      Description: Role for Iterator Lambda with Lambda invoke permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Policies:
        - PolicyName: InvokeLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt GenerateGtfsRtLambda.Arn
                  - !GetAtt GenerateSiriVmLambda.Arn
                  - !GetAtt GenerateSiriVmTflLambda.Arn

  NaptanCacheStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-${SubFunction}-naptan-cache-sm-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: StateMachineLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt PopulateDynamodbNaptanCacheLambda.Arn
                  - !GetAtt UpdateIDsDynamodbNaptanCacheLambda.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-naptan-cache-sm:*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-naptan-cache-sm'

  NaptanCacheLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-${SubFunction}-naptan-cache-lambda-execution-role
      Description: Role for Naptan Cache Lambda with basic permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-rw-user-access-policy-arn}}'
          - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      Policies:
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt NaptanStopPointTable.Arn
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'

  ConsolidateTracksStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-sm-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: StateMachineLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt ConsolidateTracksBatcherLambda.Arn
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt ConsolidateTracksUpdaterLambda.Arn
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt ConsolidateTracksReporterLambda.Arn
        - PolicyName: StateMachineSfInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-sm'
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-sm:*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-sm'
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}'
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}/*'
                  - '*'
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'

  ConsolidateTracksBatcherExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-batcher-role
      Description: Role for Consolidate Tracks Batcher Lambda with basic permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-rw-user-access-policy-arn}}'
          - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      Policies:
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}'
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}/*'
                  - '*'

  ConsolidateTracksUpdaterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-updater-role
      Description: Role for Consolidate Tracks Updater Lambda with basic permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-rw-user-access-policy-arn}}'
          - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      Policies:
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'

  ConsolidateTracksReporterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-reporter-role
      Description: Role for Consolidate Tracks Reporter Lambda with basic permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-rw-user-access-policy-arn}}'
          - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      Policies:
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'
        - PolicyName: S3BucketAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}'
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject*
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}/*'
                  - '*'

  #########################
  #### SECURITY GROUPS ####
  #########################
  CommonLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsNotLocal
    Properties:
      GroupDescription: !Sub 'Security group for ${ProjectName}-${Environment}-${SubFunction} PT related lambda functions'
      GroupName: !Sub '${ProjectName}-${Environment}-${SubFunction}-common-lambda'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          Description: 'Allow outbound connectivity to any'
          CidrIp: '0.0.0.0/0'
      VpcId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/vpc-id}}'
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-${SubFunction}-common-lambda'

  CommonLambdaSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsNotLocal
    Properties:
      GroupId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-sg-id}}'
        - !Ref AWS::NoValue
      Description: !Sub 'Allow inbound connectivity from ${ProjectName}-${Environment}-${SubFunction}-common-lambda'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt CommonLambdaSecurityGroup.GroupId

  ####################
  #### LOG GROUPS ####
  ####################
  IteratorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-iterator-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  GenerateGtfsRtLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-generate-gtfsrt-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  GenerateSiriVmLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  GenerateSiriVmTflLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-tfl-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  NaptanCacheStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-naptan-cache-sm'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  PopulateDynamodbNaptanCacheLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-populate-dynamodb-naptan-cache-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  UpdateIDsDynamodbNaptanCacheLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-update-ids-dynamodb-naptan-cache-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  ConsolidateTracksStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-sm'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  ConsolidateTracksBatcherLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-batcher-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  ConsolidateTracksUpdaterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-updater-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  ConsolidateTracksReporterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-consolidate-tracks-reporter-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

#################
#### OUTPUTS ####
#################
Outputs:
  NaptanStopPointTableArn:
    Description: ARN associated with the Naptan Stop Points DynamoDb Table
    Value: !GetAtt NaptanStopPointTable.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-naptan-stop-points-table-arn'

  NaptanStopPointTableName:
    Description: Name of the Naptan Stop Points DynamoDb Table
    Value: !Ref NaptanStopPointTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-naptan-stop-points-table-name'
