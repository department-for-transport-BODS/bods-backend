AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Supporting services for the execution of periodic tasks

Parameters:
  Environment:
    Type: String
    Description: The environment into which the stack is being deployed
  ProjectName:
    Description: The name of the project
    Type: String
  SubFunction:
    Description: The sub-fuction that each resource relates to
    Type: String
    Default: 'pt'
  AvlConsumerApiBaseUrl:
    Type: String
  CavlConsumerUrl:
    Type: String
  GtfsApiBaseUrl:
    Type: String
  RdsDbHostAddr:
    Type: String
    Default: ''
  RdsDbPort:
    Type: Number
  RdsDbName:
    Type: String
    Description: Database name for local development
    Default: 'postgres'
  RdsDbUsername:
    Type: String
    Description: User name for local development
    Default: 'bodds_rw'
  BoilerplateLambdaLayerArn:
    Type: String

Conditions:
  IsNotLocal: !Not [!Equals [!Ref Environment, 'local']]
  IsStandalone: !Equals [!Ref Environment, 'standalone']
  IsUsingBodsInfra:
    !Not [
      !Or [
        !Equals [!Ref Environment, 'local'],
        !Equals [!Ref Environment, 'standalone'],
      ],
    ]

Globals:
  Function:
    Architectures:
      - x86_64
    Runtime: python3.11
    Timeout: 60
    MemorySize: 1024
    ReservedConcurrentExecutions: 3
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-x86_64:5
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:53'
    LoggingConfig:
      LogFormat: JSON
    Tracing: Active
    PropagateTags: true
    Environment:
      Variables:
        PROJECT_ENV: !Ref Environment
        PROJECT_NAME: !Ref ProjectName
        POSTGRES_HOST: !If
          - IsUsingBodsInfra
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
          - !If
            - IsStandalone
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-rds-proxy-endpoint'
            - !If
              - IsNotLocal
              - !Sub '{{resolve:ssm:/bodds/${Environment}/etl-rds-proxy-endpoint}}'
              - !Ref RdsDbHostAddr
        POSTGRES_PORT: !If
          - IsUsingBodsInfra
          - !Ref RdsDbPort
          - !If
            - IsStandalone
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-rds-port'
            - !Ref RdsDbPort
        POSTGRES_DB: !If
          - IsUsingBodsInfra
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
          - !If
            - IsStandalone
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-rds-db-name'
            - !Ref RdsDbName
        POSTGRES_USER: !If
          - IsUsingBodsInfra
          - !Sub '{{resolve:ssm:/bodds/${Environment}/pg-rw-user}}'
          - !If
            - IsStandalone
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-rds-app-username'
            - !Ref RdsDbUsername
        HTTPS_PROXY: !If
          - IsNotLocal
          - !Sub 'http://squid.bodds.${Environment}:3128'
          - !Ref AWS::NoValue
        AWS_SIRIVM_STORAGE_BUCKET_NAME: !If
          - IsUsingBodsInfra
          - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/sirivm/name}}'
          - !If
            - IsStandalone
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-s3-bucket-name'
            - !Ref AWS::NoValue
    KmsKeyArn: !If
      - IsUsingBodsInfra
      - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
      - !If
        - IsStandalone
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
        - !Ref AWS::NoValue
    VpcConfig: !If
      - IsUsingBodsInfra
      - SubnetIds:
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-0}}'
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-1}}'
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-2}}'
        SecurityGroupIds:
          - !GetAtt CommonLambdaSecurityGroup.GroupId
      - !If
        - IsStandalone
        - SubnetIds:
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-subnet-1-id'
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-subnet-2-id'
          SecurityGroupIds:
            - !GetAtt CommonLambdaSecurityGroup.GroupId
        - !Ref AWS::NoValue

Resources:
  ###################################
  #### PT ITERATOR STATE MACHINE ####
  ###################################
  IteratorStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-iterator-sm'
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref IteratorLambda
      Events:
        Scheduler:
          Type: Schedule
          Properties:
            Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-iterator-sm-scheduler'
            Schedule: rate(1 minute)
            Enabled: True
            Input: !Sub |
              {
                "functions": [ 
                  "${GenerateGtfsRtLambda}",
                  "${GenerateSiriVmLambda}",
                  "${GenerateSiriVmTflLambda}"
                ]
              }
      Definition:
        StartAt: ConfigureCount
        States:
          ConfigureCount:
            Next: MapState
            Result:
              intervals: [0, 10, 20, 30, 40, 50]
            ResultPath: $.config
            Type: Pass
          MapState:
            Type: Map
            ItemsPath: $.functions
            Iterator:
              StartAt: InvokeLambda
              States:
                InvokeLambda:
                  Type: Task
                  Resource: !GetAtt IteratorLambda.Arn
                  Parameters:
                    functionName.$: $.functionName
                    intervals.$: $.intervals
                  Next: Done
                Done:
                  End: true
                  Type: Pass
            Parameters:
              functionName.$: $$.Map.Item.Value
              intervals.$: $.config.intervals
            End: true

  #########################
  #### LAMBDA FUNCTIONS ####
  #########################
  IteratorLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-iterator-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: iterator.lambda_handler
      MemorySize: 128
      Role: !GetAtt IteratorLambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref IteratorLambdaLogGroup

  GenerateGtfsRtLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-generate-gtfsrt-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: create_gtfsrt_zip.lambda_handler
      Role: !GetAtt GenerateLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          CAVL_CONSUMER_URL: !Ref CavlConsumerUrl
          GTFS_API_BASE_URL: !Ref GtfsApiBaseUrl
      LoggingConfig:
        LogGroup: !Ref GenerateGtfsRtLambdaLogGroup

  GenerateSiriVmLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: create_sirivm_zip.lambda_handler
      Role: !GetAtt GenerateLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          AVL_CONSUMER_API_BASE_URL: !Ref AvlConsumerApiBaseUrl
      LoggingConfig:
        LogGroup: !Ref GenerateSiriVmLambdaLogGroup

  GenerateSiriVmTflLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-tfl-lambda'
      CodeUri: ./src/periodic_tasks
      Handler: create_sirivm_tfl_zip.lambda_handler
      Role: !GetAtt GenerateLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Environment:
        Variables:
          AVL_CONSUMER_API_BASE_URL: !Ref AvlConsumerApiBaseUrl
      LoggingConfig:
        LogGroup: !Ref GenerateSiriVmTflLambdaLogGroup

  PopulateDynamodbNaptanCacheLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-populate-dynamodb-naptan-cache-lambda'
      Description: Periodic Tasks - Populate the DynamoDB Naptan Cache
      CodeUri: ./src/periodic_tasks/naptan_cache
      Handler: app.handler_naptan_cache.lambda_handler
      Role: !GetAtt NaptanCacheLambdaExecutionRole.Arn
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      Timeout: 600
      MemorySize: 1280
      EphemeralStorage:
        Size: 1024
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-naptan-stoppoint-cache-daily'
            Description: 'Trigger Naptan cache update every 24 hours'
            Schedule: 'rate(24 hours)'
            Input: !Sub |
              {
                "naptan_url": "https://naptan.api.dft.gov.uk/v1/access-nodes?dataFormat=xml",
                "dynamo_table": "${ProjectName}-${Environment}-naptan-stop-points-table",
                "aws_region": "eu-west-2"
              }
  #########################################
  #### DYNAMODB TABLES ####
  #########################################

  NaptanStopPointTable:
    ## checkov:skip=CKV_AWS_28:Ensure DynamoDB point in time recovery (backup) is enabled. Backup isn't Required, it's a cache
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-naptan-stop-points-table'
      AttributeDefinitions:
        - AttributeName: AtcoCode
          AttributeType: S
      KeySchema:
        - AttributeName: AtcoCode
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
        KMSMasterKeyId: !If
          - IsUsingBodsInfra
          - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
          - !If
            - IsStandalone
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
            - !Ref AWS::NoValue

  #########################################
  #### IAM POLICIES ####
  #########################################

  GenerateLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for Generate Lambda functions with S3, KMS, and RDS access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - !If
          - IsUsingBodsInfra
          - !Sub '{{resolve:ssm:/bodds/${Environment}/etl-rds-proxy-rw-user-access-policy-arn}}'
          - !If
            - IsStandalone
            - !Ref AWS::NoValue
            - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
      Policies:
        - PolicyName: S3AndKMSPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub
                  - '${BucketArn}/*'
                  - BucketArn: !If
                      - IsUsingBodsInfra
                      - !Sub 'arn:aws:s3:::{{resolve:ssm:/bodds/${Environment}/s3/sirivm/name}}'
                      - !If
                        - IsStandalone
                        - Fn::Join:
                            - ''
                            - - 'arn:aws:s3:::'
                              - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-s3-bucket-name'
                        - !Ref AWS::NoValue
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                Resource: !If
                  - IsUsingBodsInfra
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - !If
                    - IsStandalone
                    - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
                    - '*'

  IteratorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for Iterator Lambda with Lambda invoke permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Policies:
        - PolicyName: InvokeLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt GenerateGtfsRtLambda.Arn
                  - !GetAtt GenerateSiriVmLambda.Arn
                  - !GetAtt GenerateSiriVmTflLambda.Arn

  NaptanCacheLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for Naptan Cache Lambda with basic permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Policies:
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt NaptanStopPointTable.Arn
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !If
                  - IsUsingBodsInfra
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - !If
                    - IsStandalone
                    - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
                    - '*'
  #########################################
  #### SECURITY GROUPS ####
  #########################################
  CommonLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsNotLocal
    Properties:
      GroupDescription: !Sub 'Security group for ${ProjectName}-${Environment}-${SubFunction} PT related lambda functions'
      GroupName: !Sub '${ProjectName}-${Environment}-${SubFunction}-common-lambda'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          Description: 'Allow outbound connectivity to any'
          CidrIp: '0.0.0.0/0'
      VpcId: !If
        - IsUsingBodsInfra
        - !Sub '{{resolve:ssm:/bodds/${Environment}/vpc-id}}'
        - !If
          - IsStandalone
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-vpc-id'
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-${SubFunction}-common-lambda'

  CommonLambdaSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsNotLocal
    Properties:
      GroupId: !If
        - IsUsingBodsInfra
        - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-sg-id}}'
        - !If
          - IsStandalone
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-rds-sg-id'
          - !Ref AWS::NoValue
      Description: !Sub 'Allow inbound connectivity from ${ProjectName}-${Environment}-${SubFunction}-common-lambda'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt CommonLambdaSecurityGroup.GroupId

  ####################################
  #### Log Groups ####
  ####################################
  IteratorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-iterator-lambda'
      KmsKeyId: !If
        - IsUsingBodsInfra
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !If
          - IsStandalone
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
          - !Ref AWS::NoValue
      RetentionInDays: 30

  GenerateGtfsRtLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-generate-gtfsrt-lambda'
      KmsKeyId: !If
        - IsUsingBodsInfra
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !If
          - IsStandalone
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
          - !Ref AWS::NoValue
      RetentionInDays: 30
  GenerateSiriVmLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-lambda'
      KmsKeyId: !If
        - IsUsingBodsInfra
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !If
          - IsStandalone
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
          - !Ref AWS::NoValue
      RetentionInDays: 30

  GenerateSiriVmTflLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-generate-sirivm-tfl-lambda'
      KmsKeyId: !If
        - IsUsingBodsInfra
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !If
          - IsStandalone
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
          - !Ref AWS::NoValue
      RetentionInDays: 30

  PopulateDynamodbNaptanCacheLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-populate-dynamodb-naptan-cache-lambda'
      KmsKeyId: !If
        - IsUsingBodsInfra
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !If
          - IsStandalone
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-standalone-kms-key-arn'
          - !Ref AWS::NoValue
      RetentionInDays: 30
