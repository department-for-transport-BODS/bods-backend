AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Standalone resources for timetables ETL dev and self contained AWS Deployment

Parameters:
  Environment:
    Type: String
    Description: Environment name
  ProjectName:
    Type: String
    Description: Project name for resource tagging

Resources:
  # VPC Setup
  StandaloneVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-vpc"

  StandaloneSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StandaloneVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-1"

  StandaloneSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StandaloneVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref "AWS::Region"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-2"

  # Internet Connectivity
  StandaloneIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-igw"

  AttachStandaloneIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref StandaloneVPC
      InternetGatewayId: !Ref StandaloneIGW

  StandaloneRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StandaloneVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rt"

  StandaloneDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachStandaloneIGW
    Properties:
      RouteTableId: !Ref StandaloneRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref StandaloneIGW

  StandaloneSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StandaloneSubnet1
      RouteTableId: !Ref StandaloneRouteTable

  StandaloneSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StandaloneSubnet2
      RouteTableId: !Ref StandaloneRouteTable

  # KMS

  StandaloneKMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Sub "KMS key for ${ProjectName} ${Environment} encryption"
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow RDS Service
            Effect: Allow
            Principal:
              Service: "rds.amazonaws.com"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - kms:DescribeKey
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-standalone-kms-key"
  StandaloneKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${ProjectName}-${Environment}-standalone-kms-key"
      TargetKeyId: !Ref StandaloneKMSKey

  # RDS Setup
  StandaloneRDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}/${Environment}/rds-credentials"
      Description: "Credentials for standalone RDS instance"
      KmsKeyId: !Ref StandaloneKMSKey
      GenerateSecretString:
        SecretStringTemplate: '{"username": "bodds_rw"}'
        GenerateStringKey: "password"
        PasswordLength: 32
        ExcludeCharacters: '"@/\'''
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
  StandaloneRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for standalone RDS instance"
      SubnetIds:
        - !Ref StandaloneSubnet1
        - !Ref StandaloneSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rds-subnet-group"

  StandaloneRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-${Environment}-rds-sg"
      GroupDescription: !Sub "Security group for ${ProjectName}-${Environment} standalone RDS instance"
      VpcId: !Ref StandaloneVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref StandaloneLambdaSecurityGroup

  StandaloneLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-${Environment}-lambda-sg"
      GroupDescription: !Sub "Security group for ${ProjectName}-${Environment} standalone lambda functions"
      VpcId: !Ref StandaloneVPC
      SecurityGroupEgress:
        - IpProtocol: "-1"
          Description: "Allow outbound connectivity to any"
          CidrIp: "0.0.0.0/0"

  StandaloneRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBInstanceClass: db.t3.micro
      AllocatedStorage: "20"
      DBName: postgres
      MasterUsername: !Sub "{{resolve:secretsmanager:${StandaloneRDSSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${StandaloneRDSSecret}:SecretString:password}}"
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref StandaloneRDSSubnetGroup
      EnableIAMDatabaseAuthentication: true
      VPCSecurityGroups:
        - !GetAtt StandaloneRDSSecurityGroup.GroupId
      BackupRetentionPeriod: 0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rds"
      KmsKeyId: !Ref StandaloneKMSKey
      StorageEncrypted: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  # S3 Bucket
  StandaloneS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-bucket"

Outputs:
  StandaloneVpcId:
    Description: VPC ID for standalone environment
    Value: !Ref StandaloneVPC
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-vpc-id"

  StandaloneSubnet1Id:
    Description: First subnet ID
    Value: !Ref StandaloneSubnet1
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-subnet-1-id"

  StandaloneSubnet2Id:
    Description: Second subnet ID
    Value: !Ref StandaloneSubnet2
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-subnet-2-id"

  StandaloneRdsEndpoint:
    Description: RDS endpoint address
    Value: !GetAtt StandaloneRDSInstance.Endpoint.Address
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-rds-endpoint"

  StandaloneRdsPort:
    Description: RDS port
    Value: !GetAtt StandaloneRDSInstance.Endpoint.Port
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-rds-port"

  StandaloneRdsSecretArn:
    Description: ARN of RDS secret
    Value: !Ref StandaloneRDSSecret
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-rds-secret-arn"
  StandaloneRdsDbName:
    Description: Name of the RDS database
    Value: postgres
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-rds-db-name"
  StandaloneS3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref StandaloneS3Bucket
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-s3-bucket-name"
  StandaloneLambdaSecurityGroupId:
    Description: Security group ID for Lambda functions
    Value: !Ref StandaloneLambdaSecurityGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-lambda-sg-id"
  StandaloneKMSKeyId:
    Description: KMS Key ID for encryption
    Value: !Ref StandaloneKMSKey
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-kms-key-id"

  StandaloneKMSKeyArn:
    Description: KMS Key ARN for encryption
    Value: !GetAtt StandaloneKMSKey.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-standalone-kms-key-arn"
