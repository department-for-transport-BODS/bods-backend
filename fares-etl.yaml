AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref 'AWS::StackName'
      apiKey: !Sub '{{resolve:secretsmanager:bodds/${Environment}/dd_api_key}}'
      pythonLayerVersion: 105
      extensionLayerVersion: 69
      site: datadoghq.eu
      service: !Sub '${ProjectName}-fares-etl'
      env: !Ref Environment
      version: !Ref Version
      gitData: !Ref DDGitData
      enableDDTracing: true
      captureLambdaPayload: true
      enableProfiling: false
Description: Supporting services for the execution of the fares ETL process

Parameters:
  Environment:
    Type: String
    Description: The environment into which the stack is being deployed
  ProjectName:
    Description: The name of the project
    Type: String
  SubFunction:
    Description: The sub-fuction that each resource relates to
    Type: String
    Default: 'fares'
  RdsDbHostAddr:
    Type: String
    Default: ''
  RdsDbPort:
    Type: Number
  RdsDbName:
    Type: String
    Description: Database name for local development
    Default: 'postgres'
  RdsDbUsername:
    Type: String
    Description: User name for local development
    Default: 'bodds_rw'
  BoilerplateLambdaLayerArn:
    Type: String
  DDGitData:
    Type: String
    Default: ''
    Description: 'The output of $(git rev-parse HEAD),$(git config --get remote.origin.url). Used for Datadog Source Code Integration tagging'
  Version:
    Type: String
    Default: 'unknown'
    Description: 'Version to pass to Datadog APM'
Conditions:
  IsNotLocal: !Not [!Equals [!Ref Environment, 'local']]
  IsNotProd: !Not [!Equals [!Ref Environment, 'prod']]

Globals:
  Function:
    Architectures:
      - x86_64
    Runtime: python3.11
    Timeout: 300
    MemorySize: 256
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-x86_64:5
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:53'
    LoggingConfig:
      LogFormat: JSON
    Tracing: Active
    PropagateTags: true
    KmsKeyArn: !If
      - IsNotLocal
      - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
      - !Ref AWS::NoValue
    VpcConfig: !If
      - IsNotLocal
      - SubnetIds:
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-0}}'
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-1}}'
          - !Sub '{{resolve:ssm:/bodds/${Environment}/private-subnet-2}}'
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-common-lambda-sg-id'
      - !Ref AWS::NoValue
    Environment:
      Variables:
        POWERTOOLS_METRICS_NAMESPACE: bods
        POWERTOOLS_SERVICE_NAME: fares-etl
        HTTPS_PROXY: !If
          - IsNotLocal
          - !Sub 'http://squid.bodds.${Environment}:3128'
          - !Ref AWS::NoValue
        NO_PROXY: 'localhost,127.0.0.1,secretsmanager.eu-west-2.amazonaws.com,s3.eu-west-2.amazonaws.com,dynamodb.eu-west-2.amazonaws.com,instrumentation-telemetry-intake.datadoghq.eu,7-63-3-app.agent.datadoghq.eu,http-intake.logs.datadoghq.eu,trace.agent.datadoghq.eu'
        PROJECT_ENV: !Ref Environment
        PROJECT_NAME: !Ref ProjectName
        POSTGRES_HOST: !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-endpoint}}'
          - !Ref RdsDbHostAddr
        POSTGRES_PORT: !Ref RdsDbPort
        POSTGRES_DB: !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-db-name}}'
          - !Ref RdsDbName
        POSTGRES_USER: !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/pg-rw-user}}'
          - !Ref RdsDbUsername
        DD_MERGE_XRAY_TRACES: true
        DD_RUNTIME_METRICS_ENABLED: true
        DD_DBM_PROPAGATION_MODE: full
        DD_EXTENSION_VERSION: compatibility

Resources:
  #######################
  #### STATE MACHINE ####
  #######################
  FaresStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-${SubFunction}-sm'
      Role: !GetAtt FaresStateMachineRole.Arn
      DefinitionUri: './src/fares_etl.statemachine.json'
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt FaresStateMachineLogGroup.Arn
      PropagateTags: true
      Tracing:
        Enabled: True
      DefinitionSubstitutions:
        InitializePipelineLambdaArn:
          Fn::ImportValue: !Sub '${ProjectName}-${Environment}-initialize-pipeline-lambda-arn'
        ClamAvScannerLambdaArn:
          Fn::ImportValue: !Sub '${ProjectName}-${Environment}-clamav-scanner-lambda-arn'
        DownloadDatasetLambdaArn:
          Fn::ImportValue: !Sub '${ProjectName}-${Environment}-download-dataset-lambda-arn'
        FileValidationLambdaArn:
          Fn::ImportValue: !Sub '${ProjectName}-${Environment}-file-validation-lambda-arn'
        SchemaCheckLambdaArn:
          Fn::ImportValue: !Sub '${ProjectName}-${Environment}-schema-check-lambda-arn'
        GenerateOutputZipLambdaArn:
          Fn::ImportValue: !Sub '${ProjectName}-${Environment}-generate-output-zip-lambda-arn'
        ExceptionHandlerLambdaArn:
          Fn::ImportValue: !Sub '${ProjectName}-${Environment}-exception-handler-lambda-arn'
        EtlProcessLambdaArn: !GetAtt EtlProcessLambda.Arn
        FaresValidationLambdaArn: !GetAtt FaresValidationLambda.Arn
        MetadataAggregationLambdaArn: !GetAtt FaresMetadataAggregationLambda.Arn
        DefaultS3BucketName: !Sub 'bodds-${Environment}'
        FaresSemaphoreDynamoDbTableName: !Ref FaresSemaphore

  ##########################
  #### LAMBDA FUNCTIONS ####
  ##########################
  FaresValidationLambda:
    Type: AWS::Serverless::Function
    ## checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-validation-lambda'
      Description: Fares ETL - FileProcessing - Validates NeTEx data against JSON schema
      Role: !GetAtt CommonLambdaExecutionRole.Arn
      CodeUri: ./src/fares_etl/validation
      Handler: app.validation.lambda_handler
      Timeout: 300
      MemorySize: 1024
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      LoggingConfig:
        LogGroup: !Ref FaresValidationLambdaLogGroup
      Environment:
        Variables:
          DYNAMODB_FARES_METADATA_TABLE_NAME: !Ref FaresMetadataTable

  EtlProcessLambda:
    Type: AWS::Serverless::Function
    ## checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-etl-process-lambda'
      Description: Fares ETL - FileProcessing - Extracts NeTEx metadata and data catalogue info to dynamodb table
      Role: !GetAtt CommonLambdaExecutionRole.Arn
      CodeUri: ./src/fares_etl/etl
      Handler: app.etl_process.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      LoggingConfig:
        LogGroup: !Ref EtlProcessLambdaLogGroup
      Environment:
        Variables:
          DYNAMODB_FARES_METADATA_TABLE_NAME: !Ref FaresMetadataTable
          DYNAMODB_NAPTAN_STOP_POINT_TABLE_NAME:
            Fn::ImportValue: !Sub '${ProjectName}-${Environment}-naptan-stop-points-table-name'

  FaresMetadataAggregationLambda:
    Type: AWS::Serverless::Function
    ## checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${SubFunction}-metadata-aggregation-lambda'
      Description: Fares ETL - Aggregates metadata and saves to database
      Role: !GetAtt CommonLambdaExecutionRole.Arn
      CodeUri: ./src/fares_etl/metadata_aggregation
      Handler: app.metadata_aggregation.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Layers:
        - !Ref BoilerplateLambdaLayerArn
      LoggingConfig:
        LogGroup: !Ref MetadataAggregationLambdaLogGroup
      Environment:
        Variables:
          DYNAMODB_FARES_METADATA_TABLE_NAME: !Ref FaresMetadataTable

  ##################
  #### DYNAMODB ####
  ##################
  FaresMetadataTable:
    Type: AWS::DynamoDB::Table
    ## checkov:skip=CKV_AWS_28:Ensure DynamoDB point in time recovery (backup) is enabled
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-${SubFunction}-metadata-table'
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: N
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If
          - IsNotProd
          - false
          - true
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
        KMSMasterKeyId: !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
          - !Ref AWS::NoValue

  FaresSemaphore:
    # checkov:skip=CKV_AWS_28: DB stores lock to prevent more than one state machine from executing at the same time
    # checkov:skip=CKV_AWS_119: Data is just a job id
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-${SubFunction}-fares-semaphore'
      AttributeDefinitions:
        - AttributeName: LockName
          AttributeType: S
      KeySchema:
        - AttributeName: LockName
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
        KMSMasterKeyId: !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
          - !Ref AWS::NoValue

  StateMachineToDynamoLockTable:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: FaresStateMachine
      Destination:
        Id: FaresSemaphore
      Permissions:
        - Read
        - Write

  ###################
  #### IAM ROLES ####
  ###################
  CommonLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-${SubFunction}-common-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-rw-user-access-policy-arn}}'
          - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
        - !If
          - IsNotLocal
          - !Sub '{{resolve:ssm:/bodds/${Environment}/rds-proxy-ro-user-access-policy-arn}}'
          - 'arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess'
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}'
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}/*'
                  - '*'
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                  - kms:Decrypt
                  - kms:Encrypt
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'
        - PolicyName: DynamoDBMetadataAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: !GetAtt FaresMetadataTable.Arn
        - PolicyName: DynamoDBNaptanAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-naptan-stop-points-table-arn'
        - PolicyName: DataDogAPIAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:bodds/${Environment}/dd_api_key-*'

  FaresStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-${SubFunction}-sm-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: StateMachineSfInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ProjectName}-${Environment}-${SubFunction}-sm'
        - PolicyName: StateMachineLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt FaresValidationLambda.Arn
                  - !GetAtt EtlProcessLambda.Arn
                  - !GetAtt FaresMetadataAggregationLambda.Arn
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-initialize-pipeline-lambda-arn'
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-clamav-scanner-lambda-arn'
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-download-dataset-lambda-arn'
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-file-validation-lambda-arn'
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-schema-check-lambda-arn'
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-generate-output-zip-lambda-arn'
                  - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-exception-handler-lambda-arn'
        - PolicyName: S3BucketAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}'
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/s3/app/arn}}/*'
                  - '*'
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                  - kms:Decrypt
                  - kms:Encrypt
                Resource: !If
                  - IsNotLocal
                  - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
                  - '*'
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-sm:*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-sm'

  ####################
  #### LOG GROUPS ####
  ####################
  FaresStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/stepfunctions/${ProjectName}-${Environment}-${SubFunction}-sm'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  FaresValidationLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-validation-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  EtlProcessLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-etl-process-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30

  MetadataAggregationLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${SubFunction}-metadata-aggregation-lambda'
      KmsKeyId: !If
        - IsNotLocal
        - !Sub '{{resolve:ssm:/bodds/${Environment}/kms-key-arn}}'
        - !Ref AWS::NoValue
      RetentionInDays: 30
