name: pytest
on:
  pull_request:
    branches:
      - "dev"
      - "!test"
      - "!main"
    paths:
      - "src/**"
      - "tests/**"

jobs:
  pytest:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      statuses: write
      checks: write
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: "poetry"
      - name: Install Dependencies (Poetry)
        run: |
          poetry install
      - name: Install pytest PR annotation plugin
        run: poetry run pip install pytest-github-actions-annotate-failures
      - name: Run Pytest
        run: poetry run pytest --junitxml=junit/test-results.xml --cov-report term
      - name: Generate Test Summary
        id: test_summary
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2.4
        if: always()
        with:
          paths: junit/*.xml
      - name: Create Check with Test Summary
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          passed=${{ steps.test_summary.outputs.passed }}
          failed=${{ steps.test_summary.outputs.failed }}
          skipped=${{ steps.test_summary.outputs.skipped }}
          total=${{ steps.test_summary.outputs.total }}

          conclusion="success"
          if [ "$failed" -gt 0 ]; then
            conclusion="failure"
          fi

          title="Passed: $passed, Failed: $failed, Skipped: $skipped, Total: $total"

          # Create a more detailed summary using proper line breaks
          if [ "$total" -gt 0 ]; then
            pass_rate=$(echo "scale=2; ($passed * 100) / $total" | bc)
            summary="### Test Results

            - Pass Rate: ${pass_rate}%
            - Passed: $passed tests
            - Failed: $failed tests
            - Skipped: $skipped tests
            - Total: $total tests"
          else
            summary="No tests were run"
          fi

          # Properly escape the summary for JSON while preserving newlines
          json_summary=$(echo "$summary" | jq -Rs .)

          json_payload=$(jq -n \
            --arg name "Tests" \
            --arg head_sha "${{ env.COMMIT_SHA }}" \
            --arg conclusion "$conclusion" \
            --arg title "$title" \
            --arg summary "$json_summary" \
            '{
              name: $name,
              head_sha: $head_sha,
              status: "completed",
              conclusion: $conclusion,
              output: {
                title: $title,
                summary: $summary
              }
            }')

          response=$(curl -L \
            -w "\n%{http_code}" \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/check-runs \
            -d "$json_payload")

          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ge 400 ]; then
            echo "Error creating check: $response"
            exit 1
          fi
          echo "Response from GitHub API:"
          echo "$response"

      - name: Extract Coverage Percentage
        if: always()
        id: extract_coverage
        shell: bash
        run: |
          poetry run coverage json -q -o cov.json

          coverage_percentage=$(jq -r .totals.percent_covered_display cov.json)
          num_statements=$(jq .totals.num_statements cov.json)
          missing_lines=$(jq .totals.missing_lines cov.json)
          excluded_lines=$(jq .totals.excluded_lines cov.json)
          num_branches=$(jq .totals.num_branches cov.json)
          num_partial_branches=$(jq .totals.num_partial_branches cov.json)
          covered_branches=$(jq .totals.covered_branches cov.json)
          missing_branches=$(jq .totals.missing_branches cov.json)

          # Set outputs for use in next step
          echo "coverage=$coverage_percentage" >> $GITHUB_OUTPUT
          echo "statements=$num_statements" >> $GITHUB_OUTPUT

          echo "Coverage: $coverage_percentage%" | tee cov_title.txt

          {
            echo "### Coverage Report"
            echo "- Total Statements: $num_statements"
            echo "- Missing Lines: $missing_lines"
            echo "- Excluded Lines: $excluded_lines"
            echo "- Total Branches: $num_branches"
            echo "- Partial Branches: $num_partial_branches"
            echo "- Covered Branches: $covered_branches"
            echo "- Missing Branches: $missing_branches"
          } | tee cov_summary.txt

      - name: Create Coverage Check
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
          MIN_COVERAGE: 90
        run: |
          title=$(cat cov_title.txt)
          summary=$(cat cov_summary.txt)
          coverage="${{ steps.extract_coverage.outputs.coverage }}"

          conclusion="success"
          if (( $(echo "$coverage < $MIN_COVERAGE" | bc -l) )); then
            conclusion="failure"
          fi

          json_payload=$(jq -n \
            --arg name "Coverage" \
            --arg head_sha "${{ env.COMMIT_SHA }}" \
            --arg conclusion "$conclusion" \
            --arg title "$title" \
            --arg summary "$summary" \
            '{
              name: $name,
              head_sha: $head_sha,
              status: "completed",
              conclusion: $conclusion,
              output: {
                title: $title,
                summary: $summary
              }
            }')

          response=$(curl -L \
            -w "\n%{http_code}" \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/check-runs \
            -d "$json_payload")

          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ge 400 ]; then
            echo "Error creating check: $response"
            exit 1
          fi
          echo "Response from GitHub API:"
          echo "$response"
