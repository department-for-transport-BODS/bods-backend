import boto3
import pandas as pd
import urllib.parse
from json import loads
from logger import logger
from os import environ
from pydantic import BaseModel
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, select


class LambdaEvent:
    """
    Class to handle request for the lambda function
    Properties:
    db: Database connection object
    """

    def __init__(self, lambda_event):
        self._lambda_event = lambda_event
        self._db = None

    def __str__(self) -> str:
        return f"Lambda event occured"

    @property
    def db(self):
        """
        Property to access the database connection object
        """
        if self._db is None:
            self._db = BodsDB()
        return self._db


class BodsDB:
    """
    Class to handle the connection to the BODS database. The class provides properties to access the database session and the database classes.

    Properties:
    session: SqlAlchemy session
    classes: List of SqlAlchemy classes autogenerated from the database schema
    """

    def __init__(self):
        self._session = None
        self._classes = None

    @property
    def session(self):
        """
        Property to access the database session
        """
        if self._session is None:
            self._initialise_database()
        return self._session

    @property
    def classes(self):
        """
        Property to access the database classes
        """
        if self._classes is None:
            self._initialise_database()
        return self._classes

    def _initialise_database(self):
        """
        Method to initialise the database connection
        """
        connection_details = self._get_connection_details()
        logger.debug("Connecting to DB with connection string")
        try:
            self._sqlalchemy_base = automap_base()
            sqlalchemy_engine = create_engine(
                self._generate_connection_string(**connection_details)
            )
            logger.debug("Preparing SQLALchemy base")
            self._sqlalchemy_base.prepare(autoload_with=sqlalchemy_engine)
            logger.debug("Initiating DB session")
            self._session = Session(sqlalchemy_engine)
            logger.debug("Connected to DB")
            self._classes = self._sqlalchemy_base.classes
            logger.debug("Set DB classes")
        except Exception as e:
            logger.error("Failed to connect to DB")
            raise e

    def _get_connection_details(self):
        """
        Method to get the connection details for the database from the environment variables
        """
        connection_details = {}
        connection_details["host"] = environ.get("POSTGRES_HOST")
        connection_details["dbname"] = environ.get("POSTGRES_DB")
        connection_details["user"] = environ.get("POSTGRES_USER")
        connection_details["port"] = environ.get("POSTGRES_PORT")
        try:
            if environ.get("PROJECT_ENV") != "local":
                logger.debug("Getting DB token")
                connection_details["password"] = self._generate_rds_iam_auth_token(
                    connection_details["host"],
                    connection_details["port"],
                    connection_details["user"],
                )
                logger.debug("Got DB token")
                connection_details["sslmode"] = "require"
            else:
                logger.debug(
                    "Running in local environment, using DB password obtained from environment variables"
                )
                connection_details["password"] = environ.get("POSTGRES_PASSWORD", "password")
                logger.debug("Got DB password")
                connection_details["sslmode"] = "disable"

            for key, value in connection_details.items():
                if value is None:
                    logger.error(f"Missing connection details value: {key}")
                    raise ValueError
            return connection_details
        except Exception as e:
            logger.error("Failed to get connection details for database")
            raise e

    def _generate_connection_string(self, **kwargs) -> str:
        """
        Generates an AWS RDS IAM authentication token for a given RDS instance.

        Parameters:
        - **kwargs (any): A dictionary of key/value pairs that correspond to the expected values below

        Returns:
        - str: The generated connection string from parsed key/value pairs
        """
        user_password = ""
        if kwargs.get("user"):
            user_password += kwargs.get("user")
            if kwargs.get("password"):
                user_password += ":" + kwargs.get("password")
            user_password += "@"

        # Construct other parts
        other_parts = ""
        for key, value in kwargs.items():
            if key not in ["host", "port", "user", "password", "dbname"] and value:
                other_parts += f"{key}={value}&"

        # Construct the final connection string
        connection_string = (
            f"postgresql+psycopg2://{user_password}{kwargs.get('host', '')}"
        )
        if kwargs.get("port"):
            connection_string += f":{kwargs.get('port')}"
        connection_string += f"/{kwargs.get('dbname', '')}"
        if other_parts:
            connection_string += f"?{other_parts[:-1]}"

        return connection_string

    def _generate_rds_iam_auth_token(self, host, port, username) -> str:
        """
        Generates an AWS RDS IAM authentication token for a given RDS instance.

        Parameters:
        - hostname (str): The endpoint of the RDS instance.
        - port (int): The port number for the RDS instance.
        - username (str): The database username.

        Returns:
        - str: The generated IAM authentication token if successful.
        - None: If an error occurs during token generation.
        """
        try:
            session = boto3.session.Session()
            client = session.client(
                service_name="rds", region_name=environ.get("AWS_REGION")
            )
            token = client.generate_db_auth_token(
                DBHostname=host, DBUsername=username, Port=port
            )
            return urllib.parse.quote_plus(token)
        except Exception as e:
            logger.error(f"An error occurred while generating the IAM auth token: {e}")
            return None
