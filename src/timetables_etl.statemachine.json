{
  "StartAt": "ProcessInput",
  "States": {
    "ProcessInput": {
      "Type": "Pass",
      "ResultPath": "$",
      "Parameters": {
        "detail.$": "$[0].detail"
      },
      "Next": "InitializePipeline"
    },
    "InitializePipeline": {
      "Type": "Task",
      "Resource": "${InitializePipelineLambdaArn}",
      "Parameters": {
        "Bucket.$": "$.detail.bucket.name",
        "ObjectKey.$": "$.detail.object.key",
        "DatasetRevisionId.$": "$.detail.datasetRevisionId"
      },
      "ResultPath": "$.initializePipeline",
      "Next": "ClamAvScanner",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ParentExceptionHandler",
          "ResultPath": "$.errorInfo"
        }
      ]
    },
    "ClamAvScanner": {
      "Type": "Task",
      "Resource": "${ClamAvScannerLambdaArn}",
      "Parameters": {
        "Bucket.$": "$.detail.bucket.name",
        "ObjectKey.$": "$.detail.object.key",
        "DatasetRevisionId.$": "$.detail.datasetRevisionId",
        "DatasetType.$": "$.detail.datasetType"
      },
      "ResultPath": "$.scanner",
      "Next": "FileLevelProcessing",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ParentExceptionHandler",
          "ResultPath": "$.errorInfo"
        }
      ]
    },
    "FileLevelProcessing": {
      "Type": "Map",
      "Parameters": {
        "DatasetRevisionId.$": "$.detail.datasetRevisionId",
        "Bucket.$": "$.detail.bucket.name",
        "Key.$": "$$.Map.Item.Value.Key",
        "DatasetEtlTaskResultId.$": "$.initializePipeline.DatasetEtlTaskResultId",
        "detail.$": "$.detail"
      },
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Parameters": {
          "Bucket.$": "$.detail.bucket.name",
          "Prefix.$": "$.scanner.body.generatedPrefix"
        }
      },
      "ResultWriter": {
        "Resource": "arn:aws:states:::s3:putObject",
        "Parameters": {
          "Bucket.$": "$.detail.bucket.name",
          "Prefix": "tt-etl-map-results"
        }
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "FileValidation",
        "States": {
          "FileValidation": {
            "Type": "Task",
            "Resource": "${FileValidationLambdaArn}",
            "Parameters": {
              "Bucket.$": "$.Bucket",
              "ObjectKey.$": "$.Key",
              "DatasetRevisionId.$": "$.DatasetRevisionId"
            },
            "ResultPath": "$.fileValidation",
            "Next": "SchemaCheck",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "ResultPath": "$.errorInfo"
              }
            ]
          },
          "SchemaCheck": {
            "Type": "Task",
            "Resource": "${SchemaCheckLambdaArn}",
            "Parameters": {
              "Bucket.$": "$.Bucket",
              "ObjectKey.$": "$.Key",
              "DatasetRevisionId.$": "$.DatasetRevisionId",
              "ValidationResult.$": "$.fileValidation"
            },
            "ResultPath": "$.schemaCheck",
            "Next": "PostSchemaCheck",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "ResultPath": "$.errorInfo"
              }
            ]
          },
          "PostSchemaCheck": {
            "Type": "Task",
            "Resource": "${PostSchemaCheckLambdaArn}",
            "Parameters": {
              "Bucket.$": "$.Bucket",
              "ObjectKey.$": "$.Key",
              "DatasetRevisionId.$": "$.DatasetRevisionId",
              "SchemaCheckResult.$": "$.schemaCheck"
            },
            "ResultPath": "$.postSchemaCheck",
            "Next": "FileAttributesEtl",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "ResultPath": "$.errorInfo"
              }
            ]
          },
          "FileAttributesEtl": {
            "Type": "Task",
            "Resource": "${FileAttributesEtlLambdaArn}",
            "Parameters": {
              "Bucket.$": "$.Bucket",
              "ObjectKey.$": "$.Key",
              "DatasetRevisionId.$": "$.DatasetRevisionId",
              "PostSchemaCheckResult.$": "$.postSchemaCheck"
            },
            "ResultPath": "$.fileAttributesEtl",
            "Next": "PtiValidation",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "ResultPath": "$.errorInfo"
              }
            ]
          },
          "PtiValidation": {
            "Type": "Task",
            "Resource": "${PtiValidationLambdaArn}",
            "Parameters": {
              "Bucket.$": "$.Bucket",
              "ObjectKey.$": "$.Key",
              "DatasetRevisionId.$": "$.DatasetRevisionId",
              "TxcFileAttributesId.$": "$.fileAttributesEtl.id"
            },
            "ResultPath": "$.ptiValidation",
            "Next": "ETLProcess",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "ResultPath": "$.errorInfo"
              }
            ]
          },
          "ETLProcess": {
            "Type": "Task",
            "Resource": "${ETLProcessLambdaArn}",
            "Parameters": {
              "Bucket.$": "$.Bucket",
              "ObjectKey.$": "$.Key",
              "DatasetRevisionId.$": "$.DatasetRevisionId",
              "fileAttributesId.$": "$.fileAttributesEtl.id",
              "DatasetEtlTaskResultId.$": "$.DatasetEtlTaskResultId",
              "ValidationResult.$": "$.ptiValidation"
            },
            "ResultPath": "$.etlProcess",
            "Next": "Success",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "ResultPath": "$.errorInfo"
              }
            ]
          },
          "Success": {
            "Type": "Succeed"
          },
          "ExceptionHandler": {
            "Type": "Task",
            "Resource": "${ExceptionHandlerLambdaArn}",
            "Parameters": {
              "Error.$": "$.errorInfo.Error",
              "Cause.$": "States.StringToJson($.errorInfo.Cause)",
              "DatasetEtlTaskResultId.$": "$.DatasetEtlTaskResultId"
            },
            "Next": "Fail"
          },
          "Fail": {
            "Type": "Fail"
          }
        }
      },
      "MaxConcurrency": 1000,
      "ToleratedFailurePercentage": 100,
      "Next": "GenerateOutputZip",
      "ResultPath": "$.mapResults"
    },
    "GenerateOutputZip": {
      "Type": "Task",
      "Resource": "${GenerateOutputZipLambdaArn}",
      "Parameters": {
        "MapRunArn.$": "$.mapResults.MapRunArn",
        "DestinationBucket.$": "$.detail.bucket.name",
        "OutputPrefix.$": "$.scanner.body.generatedPrefix",
        "DatasetRevisionId.$": "$.detail.datasetRevisionId",
        "OriginalObjectKey.$": "$.detail.object.key"
      },
      "End": true
    },

    "ParentExceptionHandler": {
      "Type": "Task",
      "Resource": "${ExceptionHandlerLambdaArn}",
      "Parameters": {
        "Error.$": "$.errorInfo.Error",
        "Cause.$": "States.StringToJson($.errorInfo.Cause)",
        "DatasetEtlTaskResultId.$": "$.initializePipeline.DatasetEtlTaskResultId"
      },
      "End": true
    }
  }
}
