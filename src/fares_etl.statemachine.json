{
  "StartAt": "ProcessInput",
  "QueryLanguage": "JSONata",
  "States": {
    "ProcessInput": {
      "Type": "Pass",
      "Next": "ValidateLockInputs",
      "Assign": {
        "inputDataSource": "{% $states.input.inputDataSource %}",
        "datasetRevisionId": "{% $states.input.datasetRevisionId %}",
        "datasetType": "{% $states.input.datasetType %}",
        "url": "{% $exists($states.input.url) ? $states.input.url : null %}",
        "s3Bucket": "{% $exists($states.input.s3.bucket) ? $states.input.s3.bucket : '${DefaultS3BucketName}' %}",
        "s3Object": "{% $exists($states.input.s3.object) ? $states.input.s3.object : null %}",
        "publishDatasetRevision": "{% $exists($states.input.publishDatasetRevision) ? $states.input.publishDatasetRevision : false %}",
        "overwriteInputDataset": "{% $exists($states.input.overwriteInputDataset) ? $states.input.overwriteInputDataset : true %}",
        "lock_name": "bods-backend-fares-semaphore",
        "concurrency_limit": 10,
        "lock_entry": "{% $uuid() %}"
      }
    },
    "ValidateLockInputs": {
      "Type": "Choice",
      "Default": "LockConfigurationError",
      "Choices": [
        {
          "Condition": "{% $exists($lock_name) and $type($lock_name) = 'string' and $exists($concurrency_limit) and $type($concurrency_limit) = 'number' and $exists($lock_entry) and $type($lock_entry) = 'string' %}",
          "Next": "AcquireLock"
        }
      ]
    },
    "LockConfigurationError": {
      "Type": "Fail",
      "Error": "InsufficientLockInput",
      "Cause": "Lock parameters are missing or invalid"
    },
    "AcquireLock": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Assign": {
        "lockacquiredtime": "{% $states.context.State.EnteredTime %}"
      },
      "Arguments": {
        "TableName": "${FaresSemaphoreDynamoDbTableName}",
        "Key": {
          "LockName": {
            "S": "{% $lock_name %}"
          }
        },
        "ExpressionAttributeNames": {
          "#currentlockcount": "currentlockcount",
          "#lockownerid": "{% $lock_entry %}"
        },
        "ExpressionAttributeValues": {
          ":increase": { "N": "1" },
          ":limit": { "N": "{% $string($concurrency_limit) %}" },
          ":lockacquiredtime": { "S": "{% $states.context.State.EnteredTime %}" }
        },
        "UpdateExpression": "SET #currentlockcount = #currentlockcount + :increase, #lockownerid = :lockacquiredtime",
        "ConditionExpression": "currentlockcount <> :limit and attribute_not_exists(#lockownerid)",
        "ReturnValues": "UPDATED_NEW"
      },
      "Retry": [
        { "ErrorEquals": ["DynamoDB.AmazonDynamoDBException"], "MaxAttempts": 0 },
        { "ErrorEquals": ["States.ALL"], "MaxAttempts": 6, "BackoffRate": 2 }
      ],
      "Catch": [
        { "ErrorEquals": ["DynamoDB.AmazonDynamoDBException"], "Next": "InitializeLockItem", "Output": "$lockinfo.acquisitionerror" },
        { "ErrorEquals": ["DynamoDB.ConditionalCheckFailedException"], "Next": "GetCurrentLockRecord", "Output": "$lockinfo.acquisitionerror" },
        { "ErrorEquals": ["States.ALL"], "Next": "ParentExceptionHandler", "Output": { "errorInfo": "$.error", "stepName": "AcquireLock" } }
      ],
      "Next": "InitializePipeline"
    },
    "InitializeLockItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Arguments": {
        "TableName": "${FaresSemaphoreDynamoDbTableName}",
        "Item": {
          "LockName": { "S": "{% $lock_name %}" },
          "currentlockcount": { "N": "0" }
        },
        "ConditionExpression": "LockName <> :lockname",
        "ExpressionAttributeValues": {
          ":lockname": { "S": "{% $lock_name %}" }
        }
      },
      "Catch": [
        { "ErrorEquals": ["States.ALL"], "Next": "AcquireLock" }
      ],
      "Next": "AcquireLock"
    },
    "GetCurrentLockRecord": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Arguments": {
        "TableName": "${FaresSemaphoreDynamoDbTableName}",
        "ExpressionAttributeNames": {
          "#lockownerid": "{% $lock_entry %}"
        },
        "Key": {
          "LockName": { "S": "{% $lock_name %}" }
        },
        "ProjectionExpression": "#lockownerid"
      },
      "Assign": {
        "Item": "{% $states.result.Item %}",
        "ItemString": "{% $string($states.result.Item) %}"
      },
      "Output": "$lockinfo.currentlockitem",
      "Next": "CheckIfLockAlreadyAcquired"
    },
    "CheckIfLockAlreadyAcquired": {
      "Type": "Choice",
      "Choices": [
        { "Condition": "{% $exists($ItemString) and $contains($ItemString, 'Z') %}", "Next": "InitializePipeline" }
      ],
      "Default": "WaitToGetLock"
    },
    "WaitToGetLock": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "AcquireLock"
    },
    "InitializePipeline": {
      "Type": "Task",
      "Next": "RouteByInputType",
      "Resource": "${InitializePipelineLambdaArn}",
      "Arguments": {
        "Bucket": "{% $s3Bucket %}",
        "ObjectKey": "{% $s3Object %}",
        "DatasetRevisionId": "{% $datasetRevisionId %}"
      },
      "Assign": {
        "DatasetEtlTaskResultId": "{% $states.result.DatasetEtlTaskResultId %}"
      },
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ParentExceptionHandler",
          "Output": {
            "errorInfo": "{% $states.errorOutput %}"
          }
        }
      ]
    },
    "RouteByInputType": {
      "Type": "Choice",
      "Default": "ParentFail",
      "Choices": [
        {
          "Condition": "{% $inputDataSource = 'URL_DOWNLOAD' and $url != null %}",
          "Next": "DownloadDataset"
        },
        {
          "Condition": "{% $inputDataSource = 'S3_FILE' and $s3Bucket != null and $s3Object != null %}",
          "Next": "ClamAvScanner"
        }
      ]
    },
    "DownloadDataset": {
      "Type": "Task",
      "Next": "ClamAvScanner",
      "Resource": "${DownloadDatasetLambdaArn}",
      "Arguments": {
        "Url": "{% $url %}",
        "Bucket": "{% $s3Bucket %}",
        "DatasetType": "{% $datasetType %}",
        "DatasetRevisionId": "{% $datasetRevisionId %}",
        "DatasetEtlTaskResultId": "{% $DatasetEtlTaskResultId %}"
      },
      "Assign": {
        "s3Bucket": "{% $states.result.s3.bucket %}",
        "s3Object": "{% $states.result.s3.object %}"
      },
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ParentExceptionHandler",
          "Output": {
            "errorInfo": "{% $states.errorOutput %}"
          }
        }
      ]
    },
    "ClamAvScanner": {
      "Type": "Task",
      "Next": "FileLevelProcessing",
      "Resource": "${ClamAvScannerLambdaArn}",
      "Arguments": {
        "Bucket": "{% $s3Bucket %}",
        "ObjectKey": "{% $s3Object %}",
        "DatasetRevisionId": "{% $datasetRevisionId %}",
        "DatasetType": "{% $datasetType %}",
        "DatasetEtlTaskResultId": "{% $DatasetEtlTaskResultId %}"
      },
      "Assign": {
        "ExtractedSubFolder": "{% $states.result.body.generatedPrefix %}"
      },

      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ParentExceptionHandler",
          "Output": {
            "errorInfo": "{% $states.errorOutput %}"
          }
        }
      ]
    },
    "FileLevelProcessing": {
      "Type": "Map",
      "Next": "MetadataAggregation",
      "MaxConcurrency": 100,
      "ToleratedFailurePercentage": 100,
      "Output": {
        "mapResults": "{% $states.result %}"
      },
      "ItemSelector": {
        "mapS3Object": "{% $states.context.Map.Item.Value.Key %}",
        "mapDatasetRevisionId": "{% $datasetRevisionId %}",
        "datasetType": "{% $datasetType %}",
        "mapS3Bucket": "{% $s3Bucket %}",
        "mapDatasetEtlTaskResultId": "{% $DatasetEtlTaskResultId %}"
      },
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Arguments": {
          "Bucket": "{% $s3Bucket %}",
          "Prefix": "{% $ExtractedSubFolder %}"
        }
      },
      "ResultWriter": {
        "Resource": "arn:aws:states:::s3:putObject",
        "Arguments": {
          "Bucket": "{% $s3Bucket %}",
          "Prefix": "fares-etl-map-results"
        }
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "ProcessMapInput",
        "States": {
          "ProcessMapInput": {
            "Type": "Pass",
            "Next": "FileValidation",
            "Assign": {
              "Bucket": "{% $states.input.mapS3Bucket %}",
              "ObjectKey": "{% $states.input.mapS3Object %}",
              "DatasetRevisionId": "{% $states.input.mapDatasetRevisionId %}",
              "DatasetType": "{% $states.input.datasetType %}",
              "datasetEtlTaskResultId": "{% $states.input.mapDatasetEtlTaskResultId %}"
            }
          },

          "FileValidation": {
            "Type": "Task",
            "Next": "SchemaCheck",
            "Resource": "${FileValidationLambdaArn}",
            "Arguments": {
              "Bucket": "{% $Bucket %}",
              "ObjectKey": "{% $ObjectKey %}",
              "DatasetRevisionId": "{% $DatasetRevisionId %}"
            },
            "Output": {
              "fileValidation": "{% $states.result %}"
            },
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "Output": {
                  "errorInfo": "{% $states.errorOutput %}"
                }
              }
            ]
          },
          "SchemaCheck": {
            "Type": "Task",
            "Next": "FaresValidation",
            "Resource": "${SchemaCheckLambdaArn}",
            "Arguments": {
              "Bucket": "{% $Bucket %}",
              "ObjectKey": "{% $ObjectKey %}",
              "DatasetRevisionId": "{% $DatasetRevisionId %}",
              "DatasetType": "{% $DatasetType %}"
            },
            "Output": {
              "schemaCheck": "{% $states.result %}"
            },

            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "Output": {
                  "errorInfo": "{% $states.errorOutput %}"
                }
              }
            ]
          },
          "FaresValidation": {
            "Type": "Task",
            "Next": "EtlProcess",
            "Resource": "${FaresValidationLambdaArn}",
            "Arguments": {
              "Bucket": "{% $Bucket %}",
              "ObjectKey": "{% $ObjectKey %}",
              "DatasetRevisionId": "{% $DatasetRevisionId %}",
              "DatasetEtlTaskResultId": "{% $datasetEtlTaskResultId %}"
            },
            "Output": {
              "faresValidation": "{% $states.result %}"
            },

            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "Output": {
                  "errorInfo": "{% $states.errorOutput %}"
                }
              }
            ]
          },
          "EtlProcess": {
            "Type": "Task",
            "Next": "Success",
            "Resource": "${EtlProcessLambdaArn}",
            "Arguments": {
              "Bucket": "{% $Bucket %}",
              "ObjectKey": "{% $ObjectKey %}",
              "DatasetRevisionId": "{% $DatasetRevisionId %}",
              "DatasetEtlTaskResultId": "{% $datasetEtlTaskResultId %}"
            },
            "Output": {
              "etlProcess": "{% $states.result %}"
            },
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "ExceptionHandler",
                "Output": {
                  "errorInfo": "{% $states.errorOutput %}"
                }
              }
            ]
          },
          "Success": {
            "Type": "Succeed"
          },
          "ExceptionHandler": {
            "Type": "Pass",
            "Next": "Fail"
          },
          "Fail": {
            "Type": "Fail",
            "Comment": "Processing Single File in ETL Failed"
          }
        }
      }
    },
    "MetadataAggregation": {
      "Type": "Task",
      "Next": "GenerateOutputZip",
      "Resource": "${MetadataAggregationLambdaArn}",
      "Arguments": {
        "DatasetRevisionId": "{% $datasetRevisionId %}",
        "DatasetEtlTaskResultId": "{% $DatasetEtlTaskResultId %}"
      },
      "Output": "{% $states.input %}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ParentExceptionHandler",
          "Output": {
            "errorInfo": "{% $states.errorOutput %}"
          }
        }
      ]
    },
    "GenerateOutputZip": {
      "Type": "Task",
      "Next": "ReleaseLock",
      "Resource": "${GenerateOutputZipLambdaArn}",
      "Arguments": {
        "MapRunArn": "{% $states.input.mapResults.MapRunArn %}",
        "MapRunPrefix": "fares-etl-map-results",
        "DestinationBucket": "{% $s3Bucket %}",
        "OutputPrefix": "{% $ExtractedSubFolder %}",
        "DatasetRevisionId": "{% $datasetRevisionId %}",
        "OriginalObjectKey": "{% $s3Object %}",
        "DatasetEtlTaskResultId": "{% $DatasetEtlTaskResultId %}",
        "PublishDatasetRevision": "{% $publishDatasetRevision %}",
        "OverwriteInputDataset": "{% $overwriteInputDataset %}",
        "DatasetType": "{% $datasetType %}",
        "lockacquiredtime": "{% $lockacquiredtime %}"
      },
      "Catch": [
        { "ErrorEquals": ["States.ALL"], "Next": "ParentExceptionHandler", "Output": { "errorInfo": "{% $states.errorOutput %}" } }
      ]
    },
    "ReleaseLock": {
      "Type": "Task",
      "Next": "Completed",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Arguments": {
        "TableName": "${FaresSemaphoreDynamoDbTableName}",
        "Key": {
          "LockName": { "S": "{% $lock_name %}" }
        },
        "ExpressionAttributeNames": {
          "#currentlockcount": "currentlockcount",
          "#lockownerid": "{% $lock_entry %}"
        },
        "ExpressionAttributeValues": {
          ":decrease": { "N": "1" }
        },
        "UpdateExpression": "SET #currentlockcount = #currentlockcount - :decrease REMOVE #lockownerid",
        "ConditionExpression": "attribute_exists(#lockownerid)",
        "ReturnValues": "UPDATED_NEW"
      },
      "Retry": [
        { "ErrorEquals": ["DynamoDB.ConditionalCheckFailedException"], "MaxAttempts": 0 },
        { "ErrorEquals": ["States.ALL"], "MaxAttempts": 5, "BackoffRate": 1.5 }
      ],
      "Catch": [
        { "ErrorEquals": ["DynamoDB.ConditionalCheckFailedException"], "Next": "Completed" },
        { "ErrorEquals": ["States.ALL"], "Next": "ReleaseLockExceptionHandler", "Output": { "errorInfo": "$.error", "stepName": "Release Lock" } }
      ]
    },
    "ParentExceptionHandler": {
      "Type": "Task",
      "Next": "ReleaseLockExceptionHandler",
      "Resource": "${ExceptionHandlerLambdaArn}",
      "Arguments": {
        "Error": "{% $states.input.errorInfo.Error %}",
        "Cause": "{% $parse($states.input.errorInfo.Cause) %}",
        "DatasetEtlTaskResultId": "{% $DatasetEtlTaskResultId %}"
      }
    },
    "ReleaseLockExceptionHandler": {
      "Type": "Task",
      "Next": "ParentFail",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Arguments": {
        "TableName": "${FaresSemaphoreDynamoDbTableName}",
        "Key": {
          "LockName": { "S": "{% $lock_name %}" }
        },
        "ExpressionAttributeNames": {
          "#currentlockcount": "currentlockcount",
          "#lockownerid": "{% $lock_entry %}"
        },
        "ExpressionAttributeValues": {
          ":decrease": { "N": "1" }
        },
        "UpdateExpression": "SET #currentlockcount = #currentlockcount - :decrease REMOVE #lockownerid",
        "ConditionExpression": "attribute_exists(#lockownerid)",
        "ReturnValues": "UPDATED_NEW"
      },
      "Retry": [
        { "ErrorEquals": ["DynamoDB.ConditionalCheckFailedException"], "MaxAttempts": 0 },
        { "ErrorEquals": ["States.ALL"], "MaxAttempts": 5, "BackoffRate": 1.5 }
      ],
      "Catch": [
        { "ErrorEquals": ["States.ALL"], "Next": "ParentFail" }
      ]
    },
    "ParentFail": {
      "Type": "Fail",
      "Comment": "Entire ETL Pipeline Failed"
    },
    "Completed": {
      "Type": "Succeed",
      "Comment": "ETL Process Successfully Completed"
    }
  }
}
